<div class="container mt-4">
  <div class="row">
    <div class="col-lg-10 offset-lg-1">
      <div class="paper-effect">
        <div class="activity-header">
          <h1 class="main-title"><%= @activity.título %></h1>
          <div class="niveau-badge">
            <span class="badge nivel-badge" data-nivel="<%= @activity.nível %>"><%= @activity.nível %></span>
          </div>
          <div class="decorative-line"></div>
        </div>

        <% if @activity.texto.present? %>
          <div class="paper-section">
            <p class="description-text preserve-format"><%= @activity.texto %></p>
          </div>
        <% end %>

        <% # Ordenar elementos para exibição %>
        <% activity_elements = [] %>
        
        <% # Coletar todos os elementos com suas ordens %>
        <% if @activity.video_url.present? %>
          <% activity_elements << {type: 'video', order: @activity.video_order || 1, content: @activity.video_url} %>
        <% end %>
        
        <% if @activity.imagem_url.present? %>
          <% activity_elements << {type: 'image', order: @activity.imagem_order || 2, content: @activity.imagem_url} %>
        <% end %>
        
        <% if @activity.texte.present? %>
          <% activity_elements << {type: 'texte', order: @activity.texte_order || 3, content: @activity.texte} %>
        <% end %>
        
        <% @activity.statements.each do |statement| %>
          <% activity_elements << {type: 'statement', order: statement.display_order || statement.id, content: statement.conteúdo} %>
        <% end %>
        
        <% # Incluir as questões na ordenação dos elementos %>
        <% @activity.questions.each do |question| %>
          <% activity_elements << {type: 'question', order: question.display_order || question.id, content: question} %>
        <% end %>
        
        <% # Incluir sugestões na ordenação dos elementos %>
        <% @activity.suggestions.each do |suggestion| %>
          <% activity_elements << {type: 'suggestion', order: suggestion.display_order || suggestion.id, content: suggestion.conteúdo} %>
        <% end %>
        
        <% # Ordenar elementos por ordem explícita %>
        <% activity_elements.sort_by! { |element| element[:order] } %>
        
        <% # Exibir conteúdo %>
        <% activity_elements.each do |element| %>
          <% case element[:type] %>
          <% when 'video' %>
            <div class="paper-section" id="video-section">
              <% 
                # Converter URL do YouTube para formato embed
                video_id = nil
                if @activity.video_url.include?('youtube.com/watch?v=')
                  video_id = @activity.video_url.split('watch?v=').last.split('&').first
                elsif @activity.video_url.include?('youtu.be/')
                  video_id = @activity.video_url.split('youtu.be/').last
                end
                
                embed_url = video_id ? "https://www.youtube.com/embed/#{video_id}" : @activity.video_url
              %>
              <div class="ratio ratio-16x9 mb-3 video-container">
                <iframe src="<%= embed_url %>" allowfullscreen></iframe>
              </div>
            </div>
          <% when 'image' %>
            <div class="paper-section" id="image-section">
              <div class="image-container">
                <img src="<%= @activity.imagem_url %>" alt="Imagem da atividade" class="img-fluid mb-3 rounded">
              </div>
            </div>
          <% when 'texte' %>
            <div class="paper-section" id="texte-section">
              <div class="texte content-box">
                <p class="preserve-format"><%= @activity.texte %></p>
              </div>
            </div>
          <% when 'statement' %>
            <div class="paper-section">
              <div class="card enunciado-card">
                <div class="card-body">
                  <div class="preserve-format"><%= element[:content] %></div>
                </div>
              </div>
            </div>
          <% when 'suggestion' %>
            <div class="paper-section">
              <div class="card suggestion-card">
                <div class="card-header">
                  <h5><i class="bi bi-lightbulb"></i> Suggestion</h5>
                </div>
                <div class="card-body">
                  <div class="suggestion-content preserve-format"><%= element[:content] %></div>
                </div>
              </div>
            </div>
          <% when 'question' %>
            <% question = element[:content] %>
            <div class="paper-section">
              <div class="card question-card">
                <div class="card-header">
                  <h5>Question <%= activity_elements.select { |e| e[:type] == 'question' }.index { |e| e[:content] == question } + 1 %></h5>
                </div>
                <div class="card-body">
                  <p class="card-text question-content preserve-format"><%= question.conteúdo %></p>
                  
                  <% if question.alternatives.any? %>
                    <div class="alternatives">
                      <% question.alternatives.each_with_index do |alternative, index| %>
                        <div class="form-check">
                          <input 
                            class="form-check-input" 
                            type="radio" 
                            name="question_<%= question.id %>" 
                            id="alternative_<%= alternative.id %>" 
                            value="<%= alternative.id %>" 
                            data-correct="<%= alternative.correta %>">
                          <label class="form-check-label preserve-format" for="alternative_<%= alternative.id %>">
                            <span class="alternative-letter"><%= ('a'.ord + index).chr %>) </span>
                            <%= alternative.conteúdo %>
                          </label>
                        </div>
                      <% end %>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>
          <% end %>
        <% end %>

        <% # O formulário agora envolve apenas o botão de envio %>
        <% if @activity.questions.any? %>
          <form id="activity-quiz-form">
            <div class="text-center mt-4 mb-4">
              <button type="submit" class="btn btn-primary btn-lg" id="submit-answers">
                Soumettre les réponses
              </button>
            </div>
          </form>

          <div id="results-container" style="display: none;">
            <div class="paper-section">
              <div class="alert alert-success">
                <h4 class="alert-heading">Résultats</h4>
                <p id="score-message"></p>
                <hr>
                <p id="feedback-message"></p>
              </div>
              
              <div id="question-feedback">
                <!-- O feedback detalhado de cada questão será inserido ici -->
              </div>
              
              <div class="text-center mt-4">
                <button type="button" class="btn btn-outline-primary" id="show-answers">
                  Voir les réponses
                </button>
                <button type="button" class="btn btn-outline-secondary" id="retry-quiz">
                  Réessayer
                </button>
              </div>
            </div>
          </div>
        <% end %>

        <div class="actions-bar">
          <%= link_to "Retour", activities_path, class: "btn btn-retour" %>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  document.addEventListener('DOMContentLoaded', function() {
    const quizForm = document.getElementById('activity-quiz-form');
    const resultsContainer = document.getElementById('results-container');
    const scoreMessage = document.getElementById('score-message');
    const feedbackMessage = document.getElementById('feedback-message');
    const questionFeedback = document.getElementById('question-feedback');
    const showAnswersButton = document.getElementById('show-answers');
    const retryQuizButton = document.getElementById('retry-quiz');
    
    // Aplicar cores aos badges de nível
    const nivelBadges = document.querySelectorAll('.nivel-badge');
    
    // Mapear níveis para cores distintas com bom contraste
    const nivelColors = {
      'A1': '#4CAF50',  // Verde
      'A2': '#2196F3',  // Azul
      'B1': '#FF9800',  // Laranja
      'B2': '#9C27B0',  // Roxo
      'C1': '#F44336',  // Vermelho
      'C2': '#607D8B'   // Azul acinzentado
    };
    
    nivelBadges.forEach(function(badge) {
      const nivel = badge.getAttribute('data-nivel');
      if (nivelColors[nivel]) {
        badge.style.backgroundColor = nivelColors[nivel];
        badge.style.color = '#ffffff';
        badge.style.padding = '0.35em 0.65em';
        badge.style.fontWeight = '600';
        badge.style.boxShadow = '0 1px 3px rgba(0,0,0,0.2)';
        badge.style.border = '1px solid rgba(255,255,255,0.1)';
      } else {
        badge.style.backgroundColor = '#607D8B';
        badge.style.color = '#ffffff';
      }
    });
    
    if (quizForm) {
      quizForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        // Calcular pontuação
        let correctAnswers = 0;
        let totalQuestions = 0;
        const feedbackItems = [];
        
        // Obter todas as questões
        const questions = document.querySelectorAll('.question-card');
        totalQuestions = questions.length;
        
        // Verificar cada questão
        questions.forEach(function(questionElement, index) {
          const radioInput = questionElement.querySelector('input[type="radio"]');
          if (!radioInput) return; // Pular se não encontrar o input
          
          const questionId = radioInput.name;
          const selectedAnswer = questionElement.querySelector('input[type="radio"]:checked');
          const questionTextElement = questionElement.querySelector('.card-text');
          const questionHeaderElement = questionElement.querySelector('.card-header h5');
          
          if (!questionTextElement || !questionHeaderElement) return; // Pular se elementos essenciais não forem encontrados
          
          const questionText = questionTextElement.textContent;
          const questionNumber = parseInt(questionHeaderElement.textContent.replace('Question ', ''));
          
          let feedback = {
            questionNumber: questionNumber,
            questionText: questionText,
            isCorrect: false,
            selectedText: 'Pas de réponse',
            selectedLetter: '',
            correctText: '',
            correctLetter: ''
          };
          
          // Encontrar a alternativa correta para feedback
          const alternatives = questionElement.querySelectorAll('.form-check');
          if (!alternatives.length) return; // Pular se não houver alternativas
          
          let correctIndex = -1;
          
          alternatives.forEach((alt, idx) => {
            const input = alt.querySelector('input[data-correct="true"]');
            const label = alt.querySelector('label');
            if (input && label) {
              correctIndex = idx;
              feedback.correctText = label.textContent.trim();
              feedback.correctLetter = String.fromCharCode('a'.charCodeAt(0) + idx);
            }
          });
          
          if (selectedAnswer) {
            const selectedAlternative = selectedAnswer.closest('.form-check');
            if (selectedAlternative) {
              const selectedLabel = selectedAlternative.querySelector('label');
              const selectedIndex = Array.from(alternatives).indexOf(selectedAlternative);
              
              if (selectedLabel) {
                feedback.selectedText = selectedLabel.textContent.trim();
                feedback.selectedLetter = String.fromCharCode('a'.charCodeAt(0) + selectedIndex);
                feedback.isCorrect = selectedAnswer.getAttribute('data-correct') === 'true';
                
                if (feedback.isCorrect) {
                  correctAnswers++;
                }
              }
            }
          }
          
          feedbackItems.push(feedback);
        });
        
        // Calcular porcentagem
        const scorePercent = totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0;
        
        // Mostrar resultados
        if (scoreMessage) scoreMessage.textContent = `Score: ${correctAnswers}/${totalQuestions} (${scorePercent}%)`;
        
        // Feedback baseado na pontuação
        if (feedbackMessage) {
          if (scorePercent >= 80) {
            feedbackMessage.textContent = 'Excellent! Continuez comme ça!';
          } else if (scorePercent >= 60) {
            feedbackMessage.textContent = 'Bien! Vous êtes sur la bonne voie.';
          } else {
            feedbackMessage.textContent = 'Continuez à pratiquer pour améliorer vos résultats.';
          }
        }
        
        // Desabilitar inputs para evitar alterações
        document.querySelectorAll('.question-card').forEach(function(card) {
          const inputs = card.querySelectorAll('input');
          inputs.forEach(input => input.disabled = true);
        });
        
        // Mostrar resultados
        if (resultsContainer) {
          resultsContainer.style.display = 'block';
          resultsContainer.scrollIntoView({ behavior: 'smooth' });
        }
        
        // Botão para mostrar respostas detalhadas
        if (showAnswersButton && questionFeedback) {
          const handleShowAnswers = function() {
            // Limpar feedback anterior
            questionFeedback.innerHTML = '';
            
            // Gerar HTML para feedback detalhado de cada questão
            feedbackItems.forEach(function(item) {
              const feedbackHtml = `
                <div class="card mb-3 ${item.isCorrect ? 'border-success' : 'border-danger'}">
                  <div class="card-header ${item.isCorrect ? 'bg-success text-white' : 'bg-danger text-white'}">
                    Question ${item.questionNumber}
                  </div>
                  <div class="card-body">
                    <p class="card-text"><strong>Question:</strong> ${item.questionText}</p>
                    <p class="card-text"><strong>Votre réponse:</strong> 
                      ${item.selectedLetter ? `<span class="alternative-letter">${item.selectedLetter})</span> ` : ''}
                      ${item.selectedText}
                      ${item.isCorrect ? 
                        '<span class="badge bg-success">Correct</span>' : 
                        `<span class="badge bg-danger">Incorrect</span><br><strong>Réponse correcte:</strong> <span class="alternative-letter">${item.correctLetter})</span> ${item.correctText}`}
                    </p>
                  </div>
                </div>
              `;
              questionFeedback.innerHTML += feedbackHtml;
            });
            
            // Mostrar feedback detalhado
            questionFeedback.style.display = 'block';
          };
          
          // Remover listener anterior se existir
          showAnswersButton.removeEventListener('click', handleShowAnswers);
          // Adicionar novo listener
          showAnswersButton.addEventListener('click', handleShowAnswers);
        }
        
        // Botão para tentar novamente
        if (retryQuizButton && questionFeedback && resultsContainer) {
          const handleRetry = function() {
            // Resetar formulário
            document.querySelectorAll('.form-check-input').forEach(function(input) {
              input.checked = false;
              input.disabled = false;
            });
            
            // Limpar feedback detalhado
            questionFeedback.innerHTML = '';
            
            // Esconder resultados
            resultsContainer.style.display = 'none';
          };
          
          // Remover listener anterior se existir
          retryQuizButton.removeEventListener('click', handleRetry);
          // Adicionar novo listener
          retryQuizButton.addEventListener('click', handleRetry);
        }
      });
    }
  });
</script>

<style>
  /* Estilos gerais com maior especificidade */
  body .container .paper-effect {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(30, 61, 89, 0.08),
                0 2px 4px rgba(30, 61, 89, 0.04);
    padding: 2rem;
    margin-bottom: 2rem;
  }

  /* Cabeçalho da atividade com maior especificidade */
  body .container .activity-header {
    margin-bottom: 2rem;
    text-align: center;
    position: relative;
    padding: 1rem;
    background: linear-gradient(to right, rgba(30, 61, 89, 0.05), rgba(30, 61, 89, 0.02));
    border-radius: 12px;
  }

  body .container .activity-header .main-title {
    font-family: 'Lora', serif !important;
    color: #1E3D59 !important;
    font-size: 2.8rem !important;
    font-weight: 600 !important;
    margin-bottom: 1rem !important;
    line-height: 1.2 !important;
    letter-spacing: -0.02em !important;
    text-shadow: 1px 1px 0 rgba(255, 255, 255, 0.8) !important;
  }

  body .container .activity-header .niveau-badge {
    margin: 1rem 0;
  }

  body .container .activity-header .nivel-badge {
    font-family: 'Inter', sans-serif !important;
    font-size: 1rem !important;
    font-weight: 500 !important;
    padding: 0.5em 1em !important;
    border-radius: 6px !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
  }

  body .container .activity-header .decorative-line {
    height: 3px;
    background: linear-gradient(to right, #1E3D59, #4A90E2) !important;
    margin: 1.5rem auto;
    width: 80%;
    border-radius: 2px;
    opacity: 0.8;
  }

  /* Seções de papel */
  .paper-section {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 2rem;
  }

  /* Descrição */
  .description-text {
    font-family: 'Inter', sans-serif;
    font-size: 1.1rem;
    line-height: 1.6;
    color: #2D3748;
  }

  /* Cards */
  .enunciado-card {
    border: none;
    border-left: 4px solid #1E3D59;
    border-radius: 8px;
    background-color: #F8F9FA;
  }

  .question-card {
    border: none;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(30, 61, 89, 0.05);
    margin-bottom: 1.5rem;
  }

  .question-card .card-header {
    background-color: #1E3D59;
    color: white;
    border-radius: 8px 8px 0 0;
    padding: 1rem 1.5rem;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
  }

  .suggestion-card {
    border: none;
    border-left: 4px solid #4A90E2;
    border-radius: 8px;
    background-color: #F8F9FA;
  }

  .suggestion-card .card-header {
    background-color: #4A90E2;
    color: white;
    border-radius: 8px 8px 0 0;
  }

  /* Alternativas */
  .alternatives {
    margin-top: 1.5rem;
  }

  .form-check {
    background: white;
    border: 1px solid #E2E8F0;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 0.8rem;
    transition: all 0.2s ease;
  }

  .form-check:hover {
    background-color: #F8F9FA;
    border-color: #1E3D59;
    transform: translateY(-1px);
  }

  .form-check-input {
    margin-top: 0.3rem;
  }

  .form-check-label {
    font-family: 'Inter', sans-serif;
    font-size: 1rem;
    color: #2D3748;
    margin-left: 0.5rem;
  }

  .alternative-letter {
    color: #1E3D59;
    font-weight: 600;
    margin-right: 0.5rem;
  }

  /* Botões */
  .btn-primary {
    background-color: #1E3D59;
    border: none;
    color: white;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .btn-primary:hover {
    background-color: #15304D;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(30, 61, 89, 0.15);
  }

  .btn-outline-primary {
    border: 2px solid #1E3D59;
    color: #1E3D59;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .btn-outline-primary:hover {
    background-color: #1E3D59;
    color: white;
    transform: translateY(-1px);
  }

  .btn-outline-secondary {
    border: 2px solid #4A90E2;
    color: #4A90E2;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .btn-outline-secondary:hover {
    background-color: #4A90E2;
    color: white;
    transform: translateY(-1px);
  }

  /* Resultados */
  #results-container {
    margin-top: 2rem;
  }

  .alert-success {
    background-color: #F0FDF4;
    border: none;
    border-radius: 8px;
    color: #166534;
    padding: 1.5rem;
  }

  .alert-success .alert-heading {
    font-family: 'Inter', sans-serif;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  /* Feedback detalhado */
  #question-feedback .card {
    border: none;
    border-radius: 8px;
    margin-bottom: 1rem;
  }

  #question-feedback .card.border-success {
    border-left: 4px solid #166534;
  }

  #question-feedback .card.border-danger {
    border-left: 4px solid #991B1B;
  }

  #question-feedback .card-header {
    border-radius: 8px 8px 0 0;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
  }

  #question-feedback .bg-success {
    background-color: #166534 !important;
  }

  #question-feedback .bg-danger {
    background-color: #991B1B !important;
  }

  /* Botão de retorno */
  .btn-retour {
    background-color: #4A90E2;
    border: none;
    color: white;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .btn-retour:hover {
    background-color: #357ABD;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(74, 144, 226, 0.15);
  }

  /* Responsividade */
  @media (max-width: 768px) {
    .paper-effect {
      padding: 1.5rem;
    }

    .main-title {
      font-size: 2rem;
    }

    .btn {
      width: 100%;
      margin-bottom: 0.5rem;
    }
  }
</style> 